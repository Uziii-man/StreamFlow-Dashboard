version: '3.8'

networks:
  app_network:
    driver: bridge

services:
  zookeeper:
    image: wurstmeister/zookeeper
    container_name: zookeeper
    platform: linux/amd64
    networks:
      - app_network
    ports:
      - '2181:2181'
    restart: always

  kafka:
    image: wurstmeister/kafka
    container_name: kafka
    platform: linux/amd64
    networks:
      - app_network
    ports:
      - '9092:9092'
    environment:
      KAFKA_ADVERTISED_HOST_NAME: kafka # Use the service name for Docker networking
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    depends_on:
      - zookeeper
    restart: always

  redis:
    image: redis:latest
    container_name: redis
    networks:
      - app_network
    ports:
      - '6379:6379'
    restart: always
    command: redis-server --appendonly yes
    volumes:
      - redis-data:/data

  backend:
    build:
      context: ./backend
    container_name: backend
    networks:
      - app_network
    ports:
      - '3000:3000'
    environment:
      REDIS_HOST: redis
      REDIS_PORT: 6379
      KAFKA_BROKER: kafka:9092 # Use service name 'kafka' and port 9092
      NODE_ENV: production
    depends_on:
      - redis
      - kafka
    restart: always

  frontend:
    build:
      context: ./frontend
    container_name: frontend
    ports:
      - '4200:4200' # Map the internal port to host port
    depends_on:
      - backend
    restart: always

volumes:
  redis-data: {}
